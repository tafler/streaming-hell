import dotenv from 'dotenv';
import Telegraf from 'telegraf';
import TelegrafMixpanel from 'telegraf-mixpanel';
import getData from 'getData';
import parseURL from 'parseURL';
import isURL from 'validator/lib/isURL';

dotenv.config();

const mixpanel = new TelegrafMixpanel(process.env.MIXPANEL_TOKEN);

const readableNames = {
  yandex: 'Yandex',
  spotify: 'Spotify',
  appleMusic: 'Apple Music',
  youtubeMusic: 'YouTube Music',
  youtube: 'YouTube',
  pandora: 'Pandora',
  google: 'Google',
  deezer: 'Deezer',
  tidal: 'Tidal',
  napster: 'Napster',
  fanburst: 'Fanburst',
  amazonMusic: 'Amazon Music',
  soundcloud: 'SoundCloud'
};
const bot = new Telegraf(process.env.TOKEN);
bot.use(mixpanel.middleware());

bot.start(ctx => {
  ctx.mixpanel.people.set({
    $created: new Date().toISOString(),
  });
  ctx.reply(
    'üëã –ü—Ä–∏–≤–µ—Ç!\n\n–ü–æ–¥–µ–ª–∏—Å—å —Å–æ –º–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –∞–ª—å–±–æ–º –∏–∑ –ª—é–±–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∞ —è –≤ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫–∏, –Ω–∞ –≤—Å–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≥–¥–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –∞–ª—å–±–æ–º –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é.'
  );
});

bot.help(ctx =>
  ctx.reply('–ù–∏–∫–æ–≥–¥–∞ –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–µ –æ–±–∏–∂–∞–π—Å—è. –¢—ã —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–æ—Å—Ç–∏ –∏–ª–∏ —É–±–µ–π. ¬© –ò–æ—Å–∏—Ñ –°—Ç–∞–ª–∏–Ω')
);

bot.hears('—Ç–æ—Ç–∞–ª–µ–Ω', ctx => ctx.reply('100% –ø–∏–¥–æ—Ä'));

bot.on('message', async ctx => {
  ctx.mixpanel.people.set();
  ctx.mixpanel.people.increment('msg_cnt');
  ctx.mixpanel.track('msg', {
    text: ctx.message.text
  });

  const message = ctx.message.text;
  const urls = await parseURL(message);
  if (message) {
    try {
      if (isURL(urls)) {
        const sendLinks = async () => {
          ctx.reply('üö¨ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —è –∏—â—É —Å—Å—ã–ª–∫–∏...');
          ctx.mixpanel.people.increment('req_cnt');
          const data = await getData({ link: urls });
          if (data) {
            let links = '';
            data.songlink.links.listen.sort((a, b) => {
              const nameA = readableNames[a.name] || a.name;
              const nameB = readableNames[b.name] || b.name;
              if (nameA > nameB) {
                return 1;
              } else if (nameA < nameB) {
                return -1;
              }
              return 0;
            });
            data.songlink.links.listen.forEach(item => {
              const name = readableNames[item.name] || item.name;
              links = `${links}\n*${name}*\n${item.data.listenUrl}\n`;
              console.log()
            });

            ctx.mixpanel.track('req', {
              Artist: data.songlink.artistName,
              Title: data.songlink.title,
              Provider: data.songlink.provider,
              Type: data.songlink.type,
              AlbumType: data.songlink.albumType,
              Genre: data.songlink.genre,
              URL: urls,
            });

            ctx.reply(links, { parse_mode: 'markdown' });
            ctx.reply('üëã –ì–æ—Ç–æ–≤–æ!');
            ctx.mixpanel.people.increment('res_cnt');
          } else {
            ctx.reply('üò£ –ö–∞–∂–µ—Ç—Å—è —É –º–µ–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å –≤–µ—Ä–Ω—ã–π.');
            ctx.mixpanel.people.increment('res_cnt');
            ctx.mixpanel.people.increment('res_no_data_cnt');
            ctx.mixpanel.track('', {
              URL: urls
            });
          }
        };
        sendLinks();
      } else {
        ctx.reply('ü§î –Ø –¥—É–º–∞—é, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞...');
        ctx.mixpanel.people.increment('msg_not_link_cnt');
      }
    } catch (e) {
      console.error('Link validation error');
    }
  }
});

bot.launch();
